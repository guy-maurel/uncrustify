Newline loop start: 0
log_rule(newlines_cleanup_braces : rule is 'nl_struct_brace'
log_rule(newlines_struct_union : rule is 'nl_define_macro'
log_rule(newlines_cleanup_braces : rule is 'nl_ds_struct_enum_cmt'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_open'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
log_rule(newlines_brace_pair : rule is 'nl_define_macro'
log_rule(newlines_brace_pair : rule is 'nl_create_func_def_one_liner'
log_rule(collapse_empty_body : rule is 'nl_collapse_empty_body'
log_rule(newlines_brace_pair : rule is 'eat_blanks_after_open_brace'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_end'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_end'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_start'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_start'
newline_add_between : start->text() is ';', type is SEMICOLON, orig_line is 14, orig_col is 24
newline_add_between : and end->text() is '}', orig_line is 15, orig_col is 1
   [CallStack]
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name_class'
log_rule(newlines_cleanup_braces : rule is 'nl_func_class_scope'
log_rule(newlines_cleanup_braces : rule is 'nl_func_scope_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_call_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name_class'
log_rule(newlines_cleanup_braces : rule is 'nl_func_class_scope'
log_rule(newlines_cleanup_braces : rule is 'nl_func_scope_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_call_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name_class'
log_rule(newlines_cleanup_braces : rule is 'nl_func_class_scope'
log_rule(newlines_cleanup_braces : rule is 'nl_func_scope_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_call_args'
log_rule(newlines_cleanup_braces : rule is 'nl_before_opening_brace_func_class_def'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_open'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
log_rule(newlines_brace_pair : rule is 'nl_define_macro'
log_rule(newlines_brace_pair : rule is 'nl_create_func_def_one_liner'
log_rule(newlines_brace_pair : rule is 'nl_fdef_brace_cond'
log_rule(newlines_brace_pair : rule is 'nl_fdef_brace'
log_rule(collapse_empty_body : rule is 'nl_collapse_empty_body'
log_rule(newlines_brace_pair : rule is 'eat_blanks_after_open_brace'
newline_add_between : start->text() is '{', type is BRACE_OPEN, orig_line is 6, orig_col is 1
newline_add_between : and end->text() is '}', orig_line is 7, orig_col is 1
   [CallStack]
newline_add_between : start->text() is '{', type is BRACE_OPEN, orig_line is 6, orig_col is 1
newline_add_between : and end->text() is '}', orig_line is 7, orig_col is 1
   [CallStack]
log_rule(newlines_cleanup_braces : rule is 'nl_brace_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_square'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_fparen'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
log_rule(newlines_cleanup_braces : rule is 'eat_blanks_before_close_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_struct_var'
log_rule(newlines_cleanup_braces : rule is 'nl_after_brace_close'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_start_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_args_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_single'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_end_multi_line'
log_rule(newlines_cleanup_braces : rule is 'nl_func_decl_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_type_name_class'
log_rule(newlines_cleanup_braces : rule is 'nl_func_class_scope'
log_rule(newlines_cleanup_braces : rule is 'nl_func_scope_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_proto_type_name'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren'
log_rule(newlines_cleanup_braces : rule is 'nl_func_def_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_paren_empty'
log_rule(newlines_cleanup_braces : rule is 'nl_func_call_args'
log_rule(newlines_cleanup_braces : rule is 'nl_before_opening_brace_func_class_def'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_open'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
log_rule(newlines_brace_pair : rule is 'nl_define_macro'
log_rule(newlines_brace_pair : rule is 'nl_create_func_def_one_liner'
log_rule(newlines_brace_pair : rule is 'nl_fdef_brace_cond'
log_rule(newlines_brace_pair : rule is 'nl_fdef_brace'
log_rule(collapse_empty_body : rule is 'nl_collapse_empty_body'
log_rule(newlines_brace_pair : rule is 'eat_blanks_after_open_brace'
newline_add_between : start->text() is '{', type is BRACE_OPEN, orig_line is 10, orig_col is 1
newline_add_between : and end->text() is '}', orig_line is 11, orig_col is 1
   [CallStack]
newline_add_between : start->text() is '{', type is BRACE_OPEN, orig_line is 10, orig_col is 1
newline_add_between : and end->text() is '}', orig_line is 11, orig_col is 1
   [CallStack]
log_rule(newlines_cleanup_braces : rule is 'nl_brace_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_square'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_fparen'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
log_rule(newlines_cleanup_braces : rule is 'eat_blanks_before_close_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_struct_var'
log_rule(newlines_cleanup_braces : rule is 'nl_after_brace_close'
log_rule(newlines_cleanup_braces : rule is 'nl_after_semicolon'
log_rule(newlines_cleanup_braces : rule is 'nl_after_semicolon'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_square'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_fparen'
log_rule(newlines_cleanup_braces : rule is 'nl_type_brace_init_lst_close'
log_rule(newlines_cleanup_braces : rule is 'eat_blanks_before_close_brace'
log_rule(newlines_cleanup_braces : rule is 'nl_brace_struct_var'
log_rule(newlines_cleanup_braces : rule is 'nl_after_semicolon'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_end'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_end'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_start'
log_rule(newline_def_blk : rule is 'nl_var_def_blk_start'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_class_def'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_class_proto'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_body_def'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_body_proto'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_class_def'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_class_proto'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_body_def'
log_rule(newlines_func_pre_blank_lines : rule is 'nl_before_func_body_proto'
log_rule(newlines_class_colon_pos : rule is 'pos_class_colon'
log_rule(newlines_class_colon_pos : rule is 'nl_class_colon'
log_rule(newlines_class_colon_pos : rule is 'nl_class_init_args'
log_rule(newlines_class_colon_pos : rule is 'pos_class_comma'
log_rule(newlines_class_colon_pos : rule is 'align_constr_value_span'
log_rule(newlines_class_colon_pos : rule is 'pos_constr_colon'
log_rule(newlines_class_colon_pos : rule is 'nl_constr_colon'
log_rule(newlines_class_colon_pos : rule is 'nl_constr_init_args'
log_rule(newlines_class_colon_pos : rule is 'pos_constr_comma'
log_rule(newlines_class_colon_pos : rule is 'align_constr_value_span'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(can_increase_nl : rule is 'nl_start_of_file'
log_rule(can_increase_nl : rule is 'nl_end_of_file'
log_rule(do_blank_lines : rule is 'nl_after_class'
log_rule(do_blank_lines : rule is 'nl_after_struct'
log_rule(newlines_functions_remove_extra_blank_lines : rule is 'nl_max_blank_in_func'
newlines_functions_remove_extra_blank_lines : nl_max_blank_in_func is zero
