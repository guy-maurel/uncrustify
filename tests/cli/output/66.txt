space_text : orig_line is 1, orig_col is 1, 'struct' type is STRUCT
space_text : back-to-back words need a space: pc->Text() 'struct', next->Text() 'TelegramIndex'
space_text : orig_line is 1, orig_col is 1, pc-Text() 'struct', type is STRUCT
do_space : orig_line is 1, orig_col is 1, first->Text() 'struct', type is STRUCT
do_space : first->orig_line is 1, first->orig_col is 1, first->Text() is 'struct', [STRUCT/NONE] <===>
           second->orig_line is 1, second->orig_col is 8, second->Text() is 'TelegramIndex', [TYPE/STRUCT] : rule ADD from add_space_table[ ]
ensure_force_space : <force between 'struct' and 'TelegramIndex'> rule = ADD @ 1 => 8
space_text : orig_line is 1, orig_col is 8, 'TelegramIndex' type is TYPE
space_text : orig_line is 1, orig_col is 8, pc-Text() 'TelegramIndex', type is TYPE
do_space : orig_line is 1, orig_col is 8, first->Text() 'TelegramIndex', type is TYPE
 rule = REMOVE @ 0 => 21
space_text : orig_line is 1, orig_col is 21, <Newline>, nl is 1
space_text : orig_line is 2, orig_col is 1, '{' type is BRACE_OPEN
space_text : orig_line is 2, orig_col is 1, pc-Text() '{', type is BRACE_OPEN
do_space : orig_line is 2, orig_col is 1, first->Text() '{', type is BRACE_OPEN
 rule = REMOVE @ 0 => 2
space_text : orig_line is 2, orig_col is 2, <Newline>, nl is 1
space_text : orig_line is 3, orig_col is 1, 'TelegramIndex' type is FUNC_CLASS_DEF
space_text : orig_line is 3, orig_col is 1, pc-Text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : orig_line is 3, orig_col is 1, first->Text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 3, first->orig_col is 1, first->Text() is 'TelegramIndex', [FUNC_CLASS_DEF/NONE] <===>
           second->orig_line is 3, second->orig_col is 14, second->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
 rule = IGNORE @ 0 => 14
space_text : orig_line is 3, orig_col is 14, '(' type is FPAREN_OPEN
space_text : orig_line is 3, orig_col is 14, pc-Text() '(', type is FPAREN_OPEN
do_space : orig_line is 3, orig_col is 14, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 3, first->orig_col is 14, first->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
           second->orig_line is 3, second->orig_col is 15, second->Text() is 'const', [QUALIFIER/NONE] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 15
space_text : orig_line is 3, orig_col is 15, 'const' type is QUALIFIER
space_text : back-to-back words need a space: pc->Text() 'const', next->Text() 'char'
space_text : orig_line is 3, orig_col is 15, pc-Text() 'const', type is QUALIFIER
do_space : orig_line is 3, orig_col is 15, first->Text() 'const', type is QUALIFIER
do_space : first->orig_line is 3, first->orig_col is 15, first->Text() is 'const', [QUALIFIER/NONE] <===>
           second->orig_line is 3, second->orig_col is 21, second->Text() is 'char', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'const' and 'char'> rule = FORCE @ 1 => 21
space_text : orig_line is 3, orig_col is 21, 'char' type is TYPE
space_text : orig_line is 3, orig_col is 21, pc-Text() 'char', type is TYPE
do_space : orig_line is 3, orig_col is 21, first->Text() 'char', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 21, first->Text() is 'char', [TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 25, second->Text() is '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
 rule = IGNORE @ 0 => 25
space_text : orig_line is 3, orig_col is 25, '*' type is PTR_TYPE
space_text : orig_line is 3, orig_col is 25, pc-Text() '*', type is PTR_TYPE
do_space : orig_line is 3, orig_col is 25, first->Text() '*', type is PTR_TYPE
do_space : first->orig_line is 3, first->orig_col is 25, first->Text() is '*', [PTR_TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 27, second->Text() is 'pN', [WORD/NONE] : rule sp_after_ptr_star[ ]
 rule = IGNORE @ 1 => 27
space_text : orig_line is 3, orig_col is 27, 'pN' type is WORD
space_text : orig_line is 3, orig_col is 27, pc-Text() 'pN', type is WORD
do_space : orig_line is 3, orig_col is 27, first->Text() 'pN', type is WORD
do_space : first->orig_line is 3, first->orig_col is 27, first->Text() is 'pN', [WORD/NONE] <===>
           second->orig_line is 3, second->orig_col is 29, second->Text() is ',', [COMMA/NONE] : rule sp_before_comma[ ]
 rule = REMOVE @ 0 => 29
space_text : orig_line is 3, orig_col is 29, ',' type is COMMA
space_text : orig_line is 3, orig_col is 29, pc-Text() ',', type is COMMA
do_space : orig_line is 3, orig_col is 29, first->Text() ',', type is COMMA
do_space : first->orig_line is 3, first->orig_col is 29, first->Text() is ',', [COMMA/NONE] <===>
           second->orig_line is 3, second->orig_col is 31, second->Text() is 'unsigned', [TYPE/NONE] : rule sp_after_comma[ ]
 rule = IGNORE @ 1 => 31
space_text : orig_line is 3, orig_col is 31, 'unsigned' type is TYPE
space_text : back-to-back words need a space: pc->Text() 'unsigned', next->Text() 'long'
space_text : orig_line is 3, orig_col is 31, pc-Text() 'unsigned', type is TYPE
do_space : orig_line is 3, orig_col is 31, first->Text() 'unsigned', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 31, first->Text() is 'unsigned', [TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 40, second->Text() is 'long', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'unsigned' and 'long'> rule = FORCE @ 1 => 40
space_text : orig_line is 3, orig_col is 40, 'long' type is TYPE
space_text : back-to-back words need a space: pc->Text() 'long', next->Text() 'nI'
space_text : orig_line is 3, orig_col is 40, pc-Text() 'long', type is TYPE
do_space : orig_line is 3, orig_col is 40, first->Text() 'long', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 40, first->Text() is 'long', [TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 45, second->Text() is 'nI', [WORD/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'long' and 'nI'> rule = FORCE @ 1 => 45
space_text : orig_line is 3, orig_col is 45, 'nI' type is WORD
space_text : orig_line is 3, orig_col is 45, pc-Text() 'nI', type is WORD
do_space : orig_line is 3, orig_col is 45, first->Text() 'nI', type is WORD
do_space : first->orig_line is 3, first->orig_col is 45, first->Text() is 'nI', [WORD/NONE] <===>
           second->orig_line is 3, second->orig_col is 47, second->Text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 47
space_text : orig_line is 3, orig_col is 47, ')' type is FPAREN_CLOSE
space_text : orig_line is 3, orig_col is 47, pc-Text() ')', type is FPAREN_CLOSE
do_space : orig_line is 3, orig_col is 47, first->Text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 3, first->orig_col is 47, first->Text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] <===>
           second->orig_line is 3, second->orig_col is 49, second->Text() is ':', [CONSTR_COLON/NONE] : rule sp_before_constr_colon[ ]
 rule = ADD @ 1 => 49
space_text : orig_line is 3, orig_col is 49, ':' type is CONSTR_COLON
space_text : orig_line is 3, orig_col is 49, pc-Text() ':', type is CONSTR_COLON
do_space : orig_line is 3, orig_col is 49, first->Text() ':', type is CONSTR_COLON
 rule = REMOVE @ 0 => 50
space_text : orig_line is 3, orig_col is 50, <Newline>, nl is 1
space_text : orig_line is 4, orig_col is 1, 'pTelName' type is FUNC_CTOR_VAR
space_text : orig_line is 4, orig_col is 1, pc-Text() 'pTelName', type is FUNC_CTOR_VAR
do_space : orig_line is 4, orig_col is 1, first->Text() 'pTelName', type is FUNC_CTOR_VAR
do_space : first->orig_line is 4, first->orig_col is 1, first->Text() is 'pTelName', [FUNC_CTOR_VAR/NONE] <===>
           second->orig_line is 4, second->orig_col is 9, second->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
 rule = IGNORE @ 0 => 9
space_text : orig_line is 4, orig_col is 9, '(' type is FPAREN_OPEN
space_text : orig_line is 4, orig_col is 9, pc-Text() '(', type is FPAREN_OPEN
do_space : orig_line is 4, orig_col is 9, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 4, first->orig_col is 9, first->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
           second->orig_line is 4, second->orig_col is 10, second->Text() is 'pN', [WORD/NONE] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 10
space_text : orig_line is 4, orig_col is 10, 'pN' type is WORD
space_text : orig_line is 4, orig_col is 10, pc-Text() 'pN', type is WORD
do_space : orig_line is 4, orig_col is 10, first->Text() 'pN', type is WORD
do_space : first->orig_line is 4, first->orig_col is 10, first->Text() is 'pN', [WORD/NONE] <===>
           second->orig_line is 4, second->orig_col is 12, second->Text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 12
space_text : orig_line is 4, orig_col is 12, ')' type is FPAREN_CLOSE
space_text : orig_line is 4, orig_col is 12, pc-Text() ')', type is FPAREN_CLOSE
do_space : orig_line is 4, orig_col is 12, first->Text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 4, first->orig_col is 12, first->Text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] <===>
           second->orig_line is 4, second->orig_col is 13, second->Text() is ',', [COMMA/NONE] : rule sp_before_comma[ ]
 rule = REMOVE @ 0 => 13
space_text : orig_line is 4, orig_col is 13, ',' type is COMMA
space_text : orig_line is 4, orig_col is 13, pc-Text() ',', type is COMMA
do_space : orig_line is 4, orig_col is 13, first->Text() ',', type is COMMA
 rule = REMOVE @ 0 => 14
space_text : orig_line is 4, orig_col is 14, <Newline>, nl is 1
space_text : orig_line is 5, orig_col is 1, 'nTelIndex' type is FUNC_CTOR_VAR
space_text : orig_line is 5, orig_col is 1, pc-Text() 'nTelIndex', type is FUNC_CTOR_VAR
do_space : orig_line is 5, orig_col is 1, first->Text() 'nTelIndex', type is FUNC_CTOR_VAR
do_space : first->orig_line is 5, first->orig_col is 1, first->Text() is 'nTelIndex', [FUNC_CTOR_VAR/NONE] <===>
           second->orig_line is 5, second->orig_col is 10, second->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
 rule = IGNORE @ 0 => 10
space_text : orig_line is 5, orig_col is 10, '(' type is FPAREN_OPEN
space_text : orig_line is 5, orig_col is 10, pc-Text() '(', type is FPAREN_OPEN
do_space : orig_line is 5, orig_col is 10, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 5, first->orig_col is 10, first->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
           second->orig_line is 5, second->orig_col is 11, second->Text() is 'n', [WORD/NONE] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 11
space_text : orig_line is 5, orig_col is 11, 'n' type is WORD
space_text : orig_line is 5, orig_col is 11, pc-Text() 'n', type is WORD
do_space : orig_line is 5, orig_col is 11, first->Text() 'n', type is WORD
do_space : first->orig_line is 5, first->orig_col is 11, first->Text() is 'n', [WORD/NONE] <===>
           second->orig_line is 5, second->orig_col is 12, second->Text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
 rule = IGNORE @ 0 => 12
space_text : orig_line is 5, orig_col is 12, ')' type is FPAREN_CLOSE
space_text : orig_line is 5, orig_col is 12, pc-Text() ')', type is FPAREN_CLOSE
do_space : orig_line is 5, orig_col is 12, first->Text() ')', type is FPAREN_CLOSE
 rule = REMOVE @ 0 => 13
space_text : orig_line is 5, orig_col is 13, <Newline>, nl is 1
space_text : orig_line is 6, orig_col is 1, '{' type is BRACE_OPEN
space_text : orig_line is 6, orig_col is 1, pc-Text() '{', type is BRACE_OPEN
do_space : orig_line is 6, orig_col is 1, first->Text() '{', type is BRACE_OPEN
 rule = REMOVE @ 0 => 2
space_text : orig_line is 6, orig_col is 2, <Newline>, nl is 1
space_text : orig_line is 7, orig_col is 1, '}' type is BRACE_CLOSE
space_text : orig_line is 7, orig_col is 1, pc-Text() '}', type is BRACE_CLOSE
do_space : orig_line is 7, orig_col is 1, first->Text() '}', type is BRACE_CLOSE
 rule = REMOVE @ 0 => 2
space_text : orig_line is 7, orig_col is 2, <Newline>, nl is 2
space_text : orig_line is 9, orig_col is 1, '~' type is DESTRUCTOR
space_text : orig_line is 9, orig_col is 1, pc-Text() '~', type is DESTRUCTOR
do_space : orig_line is 9, orig_col is 1, first->Text() '~', type is DESTRUCTOR
do_space : first->orig_line is 9, first->orig_col is 1, first->Text() is '~', [DESTRUCTOR/FUNC_CLASS_DEF] <===>
           second->orig_line is 9, second->orig_col is 2, second->Text() is 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] : rule REMOVE[ ]
 rule = REMOVE @ 0 => 2
space_text : orig_line is 9, orig_col is 2, 'TelegramIndex' type is FUNC_CLASS_DEF
space_text : orig_line is 9, orig_col is 2, pc-Text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : orig_line is 9, orig_col is 2, first->Text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 9, first->orig_col is 2, first->Text() is 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] <===>
           second->orig_line is 9, second->orig_col is 15, second->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
 rule = IGNORE @ 0 => 15
space_text : orig_line is 9, orig_col is 15, '(' type is FPAREN_OPEN
space_text : orig_line is 9, orig_col is 15, pc-Text() '(', type is FPAREN_OPEN
do_space : orig_line is 9, orig_col is 15, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 9, first->orig_col is 15, first->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
           second->orig_line is 9, second->orig_col is 16, second->Text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparens[ ]
 rule = IGNORE @ 0 => 16
space_text : orig_line is 9, orig_col is 16, ')' type is FPAREN_CLOSE
space_text : orig_line is 9, orig_col is 16, pc-Text() ')', type is FPAREN_CLOSE
do_space : orig_line is 9, orig_col is 16, first->Text() ')', type is FPAREN_CLOSE
 rule = REMOVE @ 0 => 17
space_text : orig_line is 9, orig_col is 17, <Newline>, nl is 1
space_text : orig_line is 10, orig_col is 1, '{' type is BRACE_OPEN
space_text : orig_line is 10, orig_col is 1, pc-Text() '{', type is BRACE_OPEN
do_space : orig_line is 10, orig_col is 1, first->Text() '{', type is BRACE_OPEN
 rule = REMOVE @ 0 => 2
space_text : orig_line is 10, orig_col is 2, <Newline>, nl is 1
space_text : orig_line is 11, orig_col is 1, '}' type is BRACE_CLOSE
space_text : orig_line is 11, orig_col is 1, pc-Text() '}', type is BRACE_CLOSE
do_space : orig_line is 11, orig_col is 1, first->Text() '}', type is BRACE_CLOSE
 rule = REMOVE @ 0 => 2
space_text : orig_line is 11, orig_col is 2, <Newline>, nl is 2
space_text : orig_line is 13, orig_col is 1, 'const' type is QUALIFIER
space_text : back-to-back words need a space: pc->Text() 'const', next->Text() 'char'
space_text : orig_line is 13, orig_col is 1, pc-Text() 'const', type is QUALIFIER
do_space : orig_line is 13, orig_col is 1, first->Text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 1, first->Text() is 'const', [QUALIFIER/NONE] <===>
           second->orig_line is 13, second->orig_col is 7, second->Text() is 'char', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'const' and 'char'> rule = FORCE @ 1 => 7
space_text : orig_line is 13, orig_col is 7, 'char' type is TYPE
space_text : orig_line is 13, orig_col is 7, pc-Text() 'char', type is TYPE
do_space : orig_line is 13, orig_col is 7, first->Text() 'char', type is TYPE
do_space : first->orig_line is 13, first->orig_col is 7, first->Text() is 'char', [TYPE/NONE] <===>
           second->orig_line is 13, second->orig_col is 11, second->Text() is '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
 rule = IGNORE @ 0 => 11
space_text : orig_line is 13, orig_col is 11, '*' type is PTR_TYPE
space_text : orig_line is 13, orig_col is 11, pc-Text() '*', type is PTR_TYPE
do_space : orig_line is 13, orig_col is 11, first->Text() '*', type is PTR_TYPE
do_space : first->orig_line is 13, first->orig_col is 11, first->Text() is '*', [PTR_TYPE/NONE] <===>
           second->orig_line is 13, second->orig_col is 13, second->Text() is 'const', [QUALIFIER/NONE] : rule sp_after_ptr_star_qualifier[ ]
 rule = IGNORE @ 1 => 13
space_text : orig_line is 13, orig_col is 13, 'const' type is QUALIFIER
space_text : back-to-back words need a space: pc->Text() 'const', next->Text() 'pTelName'
space_text : orig_line is 13, orig_col is 13, pc-Text() 'const', type is QUALIFIER
do_space : orig_line is 13, orig_col is 13, first->Text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 13, first->Text() is 'const', [QUALIFIER/NONE] <===>
           second->orig_line is 13, second->orig_col is 19, second->Text() is 'pTelName', [WORD/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'const' and 'pTelName'> rule = FORCE @ 1 => 19
space_text : orig_line is 13, orig_col is 19, 'pTelName' type is WORD
space_text : orig_line is 13, orig_col is 19, pc-Text() 'pTelName', type is WORD
do_space : orig_line is 13, orig_col is 19, first->Text() 'pTelName', type is WORD
do_space : first->orig_line is 13, first->orig_col is 19, first->Text() is 'pTelName', [WORD/NONE] <===>
           second->orig_line is 13, second->orig_col is 27, second->Text() is ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
 rule = REMOVE @ 0 => 27
space_text : orig_line is 13, orig_col is 27, ';' type is SEMICOLON
space_text : orig_line is 13, orig_col is 27, pc-Text() ';', type is SEMICOLON
do_space : orig_line is 13, orig_col is 27, first->Text() ';', type is SEMICOLON
 rule = REMOVE @ 0 => 28
space_text : orig_line is 13, orig_col is 28, <Newline>, nl is 1
space_text : orig_line is 14, orig_col is 1, 'unsigned' type is TYPE
space_text : back-to-back words need a space: pc->Text() 'unsigned', next->Text() 'long'
space_text : orig_line is 14, orig_col is 1, pc-Text() 'unsigned', type is TYPE
do_space : orig_line is 14, orig_col is 1, first->Text() 'unsigned', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 1, first->Text() is 'unsigned', [TYPE/NONE] <===>
           second->orig_line is 14, second->orig_col is 10, second->Text() is 'long', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'unsigned' and 'long'> rule = FORCE @ 1 => 10
space_text : orig_line is 14, orig_col is 10, 'long' type is TYPE
space_text : back-to-back words need a space: pc->Text() 'long', next->Text() 'nTelIndex'
space_text : orig_line is 14, orig_col is 10, pc-Text() 'long', type is TYPE
do_space : orig_line is 14, orig_col is 10, first->Text() 'long', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 10, first->Text() is 'long', [TYPE/NONE] <===>
           second->orig_line is 14, second->orig_col is 15, second->Text() is 'nTelIndex', [WORD/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'long' and 'nTelIndex'> rule = FORCE @ 1 => 15
space_text : orig_line is 14, orig_col is 15, 'nTelIndex' type is WORD
space_text : orig_line is 14, orig_col is 15, pc-Text() 'nTelIndex', type is WORD
do_space : orig_line is 14, orig_col is 15, first->Text() 'nTelIndex', type is WORD
do_space : first->orig_line is 14, first->orig_col is 15, first->Text() is 'nTelIndex', [WORD/NONE] <===>
           second->orig_line is 14, second->orig_col is 24, second->Text() is ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
 rule = REMOVE @ 0 => 24
space_text : orig_line is 14, orig_col is 24, ';' type is SEMICOLON
space_text : orig_line is 14, orig_col is 24, pc-Text() ';', type is SEMICOLON
do_space : orig_line is 14, orig_col is 24, first->Text() ';', type is SEMICOLON
 rule = REMOVE @ 0 => 25
space_text : orig_line is 14, orig_col is 25, <Newline>, nl is 1
space_text : orig_line is 15, orig_col is 1, '}' type is BRACE_CLOSE
space_text : orig_line is 15, orig_col is 1, pc-Text() '}', type is BRACE_CLOSE
do_space : orig_line is 15, orig_col is 1, first->Text() '}', type is BRACE_CLOSE
do_space : first->orig_line is 15, first->orig_col is 1, first->Text() is '}', [BRACE_CLOSE/STRUCT] <===>
           second->orig_line is 15, second->orig_col is 2, second->Text() is ';', [SEMICOLON/STRUCT] : rule sp_before_semi[ ]
 rule = REMOVE @ 0 => 2
space_text : orig_line is 15, orig_col is 2, ';' type is SEMICOLON
space_text : orig_line is 15, orig_col is 2, pc-Text() ';', type is SEMICOLON
do_space : orig_line is 15, orig_col is 2, first->Text() ';', type is SEMICOLON
 rule = REMOVE @ 0 => 3
space_text : orig_line is 15, orig_col is 3, <Newline>, nl is 2
space_col_align : first->orig_line is 3, orig_col is 1, [FUNC_CLASS_DEF/NONE], Text() 'TelegramIndex' <==>
space_col_align : second->orig_line is 3, orig_col is 14 [FPAREN_OPEN/FUNC_CLASS_DEF], Text() '(', [CallStack]
do_space : orig_line is 3, orig_col is 1, first->Text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 3, first->orig_col is 1, first->Text() is 'TelegramIndex', [FUNC_CLASS_DEF/NONE] <===>
           second->orig_line is 3, second->orig_col is 14, second->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
space_col_align : av is ignore
space_col_align :    Len is 13
space_col_align :    => coldiff is 13
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->Text()     is 'TelegramIndex'
space_col_align :    => second->Text()    is '('
space_col_align :    => first->orig_col   is 1
space_col_align :    => second->orig_col  is 14
space_col_align :    => first->Len()      is 13
space_col_align :    => coldiff is 13
space_col_align : first->orig_line is 3, orig_col is 14, [FPAREN_OPEN/FUNC_CLASS_DEF], Text() '(' <==>
space_col_align : second->orig_line is 3, orig_col is 15 [QUALIFIER/NONE], Text() 'const', [CallStack]
do_space : orig_line is 3, orig_col is 14, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 3, first->orig_col is 14, first->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
           second->orig_line is 3, second->orig_col is 15, second->Text() is 'const', [QUALIFIER/NONE] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->Text()     is '('
space_col_align :    => second->Text()    is 'const'
space_col_align :    => first->orig_col   is 14
space_col_align :    => second->orig_col  is 15
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 3, orig_col is 15, [QUALIFIER/NONE], Text() 'const' <==>
space_col_align : second->orig_line is 3, orig_col is 21 [TYPE/NONE], Text() 'char', [CallStack]
do_space : orig_line is 3, orig_col is 15, first->Text() 'const', type is QUALIFIER
do_space : first->orig_line is 3, first->orig_col is 15, first->Text() is 'const', [QUALIFIER/NONE] <===>
           second->orig_line is 3, second->orig_col is 21, second->Text() is 'char', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'const' and 'char'>space_col_align : av is force
space_col_align :    Len is 5
space_col_align :    => coldiff is 5
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 6
space_col_align : first->orig_line is 3, orig_col is 21, [TYPE/NONE], Text() 'char' <==>
space_col_align : second->orig_line is 3, orig_col is 25 [PTR_TYPE/NONE], Text() '*', [CallStack]
do_space : orig_line is 3, orig_col is 21, first->Text() 'char', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 21, first->Text() is 'char', [TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 25, second->Text() is '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
space_col_align : av is ignore
space_col_align :    Len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->Text()     is 'char'
space_col_align :    => second->Text()    is '*'
space_col_align :    => first->orig_col   is 21
space_col_align :    => second->orig_col  is 25
space_col_align :    => first->Len()      is 4
space_col_align :    => coldiff is 4
space_col_align : first->orig_line is 3, orig_col is 25, [PTR_TYPE/NONE], Text() '*' <==>
space_col_align : second->orig_line is 3, orig_col is 27 [WORD/NONE], Text() 'pN', [CallStack]
do_space : orig_line is 3, orig_col is 25, first->Text() '*', type is PTR_TYPE
do_space : first->orig_line is 3, first->orig_col is 25, first->Text() is '*', [PTR_TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 27, second->Text() is 'pN', [WORD/NONE] : rule sp_after_ptr_star[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->Text()     is '*'
space_col_align :    => second->Text()    is 'pN'
space_col_align :    => first->orig_col   is 25
space_col_align :    => second->orig_col  is 27
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 2
space_col_align : first->orig_line is 3, orig_col is 27, [WORD/NONE], Text() 'pN' <==>
space_col_align : second->orig_line is 3, orig_col is 29 [COMMA/NONE], Text() ',', [CallStack]
do_space : orig_line is 3, orig_col is 27, first->Text() 'pN', type is WORD
do_space : first->orig_line is 3, first->orig_col is 27, first->Text() is 'pN', [WORD/NONE] <===>
           second->orig_line is 3, second->orig_col is 29, second->Text() is ',', [COMMA/NONE] : rule sp_before_comma[ ]
space_col_align : av is remove
space_col_align :    Len is 2
space_col_align :    => coldiff is 2
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 2
space_col_align : first->orig_line is 3, orig_col is 29, [COMMA/NONE], Text() ',' <==>
space_col_align : second->orig_line is 3, orig_col is 31 [TYPE/NONE], Text() 'unsigned', [CallStack]
do_space : orig_line is 3, orig_col is 29, first->Text() ',', type is COMMA
do_space : first->orig_line is 3, first->orig_col is 29, first->Text() is ',', [COMMA/NONE] <===>
           second->orig_line is 3, second->orig_col is 31, second->Text() is 'unsigned', [TYPE/NONE] : rule sp_after_comma[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->Text()     is ','
space_col_align :    => second->Text()    is 'unsigned'
space_col_align :    => first->orig_col   is 29
space_col_align :    => second->orig_col  is 31
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 2
space_col_align : first->orig_line is 3, orig_col is 31, [TYPE/NONE], Text() 'unsigned' <==>
space_col_align : second->orig_line is 3, orig_col is 40 [TYPE/NONE], Text() 'long', [CallStack]
do_space : orig_line is 3, orig_col is 31, first->Text() 'unsigned', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 31, first->Text() is 'unsigned', [TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 40, second->Text() is 'long', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'unsigned' and 'long'>space_col_align : av is force
space_col_align :    Len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 9
space_col_align : first->orig_line is 3, orig_col is 40, [TYPE/NONE], Text() 'long' <==>
space_col_align : second->orig_line is 3, orig_col is 45 [WORD/NONE], Text() 'nI', [CallStack]
do_space : orig_line is 3, orig_col is 40, first->Text() 'long', type is TYPE
do_space : first->orig_line is 3, first->orig_col is 40, first->Text() is 'long', [TYPE/NONE] <===>
           second->orig_line is 3, second->orig_col is 45, second->Text() is 'nI', [WORD/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'long' and 'nI'>space_col_align : av is force
space_col_align :    Len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 5
space_col_align : first->orig_line is 3, orig_col is 45, [WORD/NONE], Text() 'nI' <==>
space_col_align : second->orig_line is 3, orig_col is 47 [FPAREN_CLOSE/FUNC_CLASS_DEF], Text() ')', [CallStack]
do_space : orig_line is 3, orig_col is 45, first->Text() 'nI', type is WORD
do_space : first->orig_line is 3, first->orig_col is 45, first->Text() is 'nI', [WORD/NONE] <===>
           second->orig_line is 3, second->orig_col is 47, second->Text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    Len is 2
space_col_align :    => coldiff is 2
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 3
space_col_align :    => second->orig_line is 3
space_col_align :    => first->Text()     is 'nI'
space_col_align :    => second->Text()    is ')'
space_col_align :    => first->orig_col   is 45
space_col_align :    => second->orig_col  is 47
space_col_align :    => first->Len()      is 2
space_col_align :    => coldiff is 2
space_col_align : first->orig_line is 3, orig_col is 47, [FPAREN_CLOSE/FUNC_CLASS_DEF], Text() ')' <==>
space_col_align : second->orig_line is 3, orig_col is 49 [CONSTR_COLON/NONE], Text() ':', [CallStack]
do_space : orig_line is 3, orig_col is 47, first->Text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 3, first->orig_col is 47, first->Text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] <===>
           second->orig_line is 3, second->orig_col is 49, second->Text() is ':', [CONSTR_COLON/NONE] : rule sp_before_constr_colon[ ]
space_col_align : av is add
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is ADD
space_col_align :    => coldiff is 2
space_col_align : first->orig_line is 3, orig_col is 49, [CONSTR_COLON/NONE], Text() ':' <==>
space_col_align : second->orig_line is 3, orig_col is 50 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 3, orig_col is 49, first->Text() ':', type is CONSTR_COLON
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 4, orig_col is 1, [FUNC_CTOR_VAR/NONE], Text() 'pTelName' <==>
space_col_align : second->orig_line is 4, orig_col is 9 [FPAREN_OPEN/FUNC_CTOR_VAR], Text() '(', [CallStack]
do_space : orig_line is 4, orig_col is 1, first->Text() 'pTelName', type is FUNC_CTOR_VAR
do_space : first->orig_line is 4, first->orig_col is 1, first->Text() is 'pTelName', [FUNC_CTOR_VAR/NONE] <===>
           second->orig_line is 4, second->orig_col is 9, second->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
space_col_align : av is ignore
space_col_align :    Len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 4
space_col_align :    => second->orig_line is 4
space_col_align :    => first->Text()     is 'pTelName'
space_col_align :    => second->Text()    is '('
space_col_align :    => first->orig_col   is 1
space_col_align :    => second->orig_col  is 9
space_col_align :    => first->Len()      is 8
space_col_align :    => coldiff is 8
space_col_align : first->orig_line is 4, orig_col is 9, [FPAREN_OPEN/FUNC_CTOR_VAR], Text() '(' <==>
space_col_align : second->orig_line is 4, orig_col is 10 [WORD/NONE], Text() 'pN', [CallStack]
do_space : orig_line is 4, orig_col is 9, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 4, first->orig_col is 9, first->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
           second->orig_line is 4, second->orig_col is 10, second->Text() is 'pN', [WORD/NONE] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 4
space_col_align :    => second->orig_line is 4
space_col_align :    => first->Text()     is '('
space_col_align :    => second->Text()    is 'pN'
space_col_align :    => first->orig_col   is 9
space_col_align :    => second->orig_col  is 10
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 4, orig_col is 10, [WORD/NONE], Text() 'pN' <==>
space_col_align : second->orig_line is 4, orig_col is 12 [FPAREN_CLOSE/FUNC_CTOR_VAR], Text() ')', [CallStack]
do_space : orig_line is 4, orig_col is 10, first->Text() 'pN', type is WORD
do_space : first->orig_line is 4, first->orig_col is 10, first->Text() is 'pN', [WORD/NONE] <===>
           second->orig_line is 4, second->orig_col is 12, second->Text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    Len is 2
space_col_align :    => coldiff is 2
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 4
space_col_align :    => second->orig_line is 4
space_col_align :    => first->Text()     is 'pN'
space_col_align :    => second->Text()    is ')'
space_col_align :    => first->orig_col   is 10
space_col_align :    => second->orig_col  is 12
space_col_align :    => first->Len()      is 2
space_col_align :    => coldiff is 2
space_col_align : first->orig_line is 4, orig_col is 12, [FPAREN_CLOSE/FUNC_CTOR_VAR], Text() ')' <==>
space_col_align : second->orig_line is 4, orig_col is 13 [COMMA/NONE], Text() ',', [CallStack]
do_space : orig_line is 4, orig_col is 12, first->Text() ')', type is FPAREN_CLOSE
do_space : first->orig_line is 4, first->orig_col is 12, first->Text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] <===>
           second->orig_line is 4, second->orig_col is 13, second->Text() is ',', [COMMA/NONE] : rule sp_before_comma[ ]
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 4, orig_col is 13, [COMMA/NONE], Text() ',' <==>
space_col_align : second->orig_line is 4, orig_col is 14 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 4, orig_col is 13, first->Text() ',', type is COMMA
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 5, orig_col is 1, [FUNC_CTOR_VAR/NONE], Text() 'nTelIndex' <==>
space_col_align : second->orig_line is 5, orig_col is 10 [FPAREN_OPEN/FUNC_CTOR_VAR], Text() '(', [CallStack]
do_space : orig_line is 5, orig_col is 1, first->Text() 'nTelIndex', type is FUNC_CTOR_VAR
do_space : first->orig_line is 5, first->orig_col is 1, first->Text() is 'nTelIndex', [FUNC_CTOR_VAR/NONE] <===>
           second->orig_line is 5, second->orig_col is 10, second->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] : rule sp_func_call_paren[ ]
space_col_align : av is ignore
space_col_align :    Len is 9
space_col_align :    => coldiff is 9
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 5
space_col_align :    => second->orig_line is 5
space_col_align :    => first->Text()     is 'nTelIndex'
space_col_align :    => second->Text()    is '('
space_col_align :    => first->orig_col   is 1
space_col_align :    => second->orig_col  is 10
space_col_align :    => first->Len()      is 9
space_col_align :    => coldiff is 9
space_col_align : first->orig_line is 5, orig_col is 10, [FPAREN_OPEN/FUNC_CTOR_VAR], Text() '(' <==>
space_col_align : second->orig_line is 5, orig_col is 11 [WORD/NONE], Text() 'n', [CallStack]
do_space : orig_line is 5, orig_col is 10, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 5, first->orig_col is 10, first->Text() is '(', [FPAREN_OPEN/FUNC_CTOR_VAR] <===>
           second->orig_line is 5, second->orig_col is 11, second->Text() is 'n', [WORD/NONE] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 5
space_col_align :    => second->orig_line is 5
space_col_align :    => first->Text()     is '('
space_col_align :    => second->Text()    is 'n'
space_col_align :    => first->orig_col   is 10
space_col_align :    => second->orig_col  is 11
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 5, orig_col is 11, [WORD/NONE], Text() 'n' <==>
space_col_align : second->orig_line is 5, orig_col is 12 [FPAREN_CLOSE/FUNC_CTOR_VAR], Text() ')', [CallStack]
do_space : orig_line is 5, orig_col is 11, first->Text() 'n', type is WORD
do_space : first->orig_line is 5, first->orig_col is 11, first->Text() is 'n', [WORD/NONE] <===>
           second->orig_line is 5, second->orig_col is 12, second->Text() is ')', [FPAREN_CLOSE/FUNC_CTOR_VAR] : rule sp_inside_fparen[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 5
space_col_align :    => second->orig_line is 5
space_col_align :    => first->Text()     is 'n'
space_col_align :    => second->Text()    is ')'
space_col_align :    => first->orig_col   is 11
space_col_align :    => second->orig_col  is 12
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 5, orig_col is 12, [FPAREN_CLOSE/FUNC_CTOR_VAR], Text() ')' <==>
space_col_align : second->orig_line is 5, orig_col is 13 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 5, orig_col is 12, first->Text() ')', type is FPAREN_CLOSE
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 6, orig_col is 1, [BRACE_OPEN/FUNC_CLASS_DEF], Text() '{' <==>
space_col_align : second->orig_line is 6, orig_col is 2 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 6, orig_col is 1, first->Text() '{', type is BRACE_OPEN
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 7, orig_col is 1, [BRACE_CLOSE/FUNC_CLASS_DEF], Text() '}' <==>
space_col_align : second->orig_line is 7, orig_col is 2 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 7, orig_col is 1, first->Text() '}', type is BRACE_CLOSE
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 9, orig_col is 1, [DESTRUCTOR/FUNC_CLASS_DEF], Text() '~' <==>
space_col_align : second->orig_line is 9, orig_col is 2 [FUNC_CLASS_DEF/DESTRUCTOR], Text() 'TelegramIndex', [CallStack]
do_space : orig_line is 9, orig_col is 1, first->Text() '~', type is DESTRUCTOR
do_space : first->orig_line is 9, first->orig_col is 1, first->Text() is '~', [DESTRUCTOR/FUNC_CLASS_DEF] <===>
           second->orig_line is 9, second->orig_col is 2, second->Text() is 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] : rule REMOVE[ ]
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 9, orig_col is 2, [FUNC_CLASS_DEF/DESTRUCTOR], Text() 'TelegramIndex' <==>
space_col_align : second->orig_line is 9, orig_col is 15 [FPAREN_OPEN/FUNC_CLASS_DEF], Text() '(', [CallStack]
do_space : orig_line is 9, orig_col is 2, first->Text() 'TelegramIndex', type is FUNC_CLASS_DEF
do_space : first->orig_line is 9, first->orig_col is 2, first->Text() is 'TelegramIndex', [FUNC_CLASS_DEF/DESTRUCTOR] <===>
           second->orig_line is 9, second->orig_col is 15, second->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] : rule sp_func_class_paren[ ]
space_col_align : av is ignore
space_col_align :    Len is 13
space_col_align :    => coldiff is 13
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 9
space_col_align :    => second->orig_line is 9
space_col_align :    => first->Text()     is 'TelegramIndex'
space_col_align :    => second->Text()    is '('
space_col_align :    => first->orig_col   is 2
space_col_align :    => second->orig_col  is 15
space_col_align :    => first->Len()      is 13
space_col_align :    => coldiff is 13
space_col_align : first->orig_line is 9, orig_col is 15, [FPAREN_OPEN/FUNC_CLASS_DEF], Text() '(' <==>
space_col_align : second->orig_line is 9, orig_col is 16 [FPAREN_CLOSE/FUNC_CLASS_DEF], Text() ')', [CallStack]
do_space : orig_line is 9, orig_col is 15, first->Text() '(', type is FPAREN_OPEN
do_space : first->orig_line is 9, first->orig_col is 15, first->Text() is '(', [FPAREN_OPEN/FUNC_CLASS_DEF] <===>
           second->orig_line is 9, second->orig_col is 16, second->Text() is ')', [FPAREN_CLOSE/FUNC_CLASS_DEF] : rule sp_inside_fparens[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 9
space_col_align :    => second->orig_line is 9
space_col_align :    => first->Text()     is '('
space_col_align :    => second->Text()    is ')'
space_col_align :    => first->orig_col   is 15
space_col_align :    => second->orig_col  is 16
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 9, orig_col is 16, [FPAREN_CLOSE/FUNC_CLASS_DEF], Text() ')' <==>
space_col_align : second->orig_line is 9, orig_col is 17 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 9, orig_col is 16, first->Text() ')', type is FPAREN_CLOSE
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 10, orig_col is 1, [BRACE_OPEN/FUNC_CLASS_DEF], Text() '{' <==>
space_col_align : second->orig_line is 10, orig_col is 2 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 10, orig_col is 1, first->Text() '{', type is BRACE_OPEN
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 11, orig_col is 1, [BRACE_CLOSE/FUNC_CLASS_DEF], Text() '}' <==>
space_col_align : second->orig_line is 11, orig_col is 2 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 11, orig_col is 1, first->Text() '}', type is BRACE_CLOSE
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 13, orig_col is 1, [QUALIFIER/NONE], Text() 'const' <==>
space_col_align : second->orig_line is 13, orig_col is 7 [TYPE/NONE], Text() 'char', [CallStack]
do_space : orig_line is 13, orig_col is 1, first->Text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 1, first->Text() is 'const', [QUALIFIER/NONE] <===>
           second->orig_line is 13, second->orig_col is 7, second->Text() is 'char', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'const' and 'char'>space_col_align : av is force
space_col_align :    Len is 5
space_col_align :    => coldiff is 5
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 6
space_col_align : first->orig_line is 13, orig_col is 7, [TYPE/NONE], Text() 'char' <==>
space_col_align : second->orig_line is 13, orig_col is 11 [PTR_TYPE/NONE], Text() '*', [CallStack]
do_space : orig_line is 13, orig_col is 7, first->Text() 'char', type is TYPE
do_space : first->orig_line is 13, first->orig_col is 7, first->Text() is 'char', [TYPE/NONE] <===>
           second->orig_line is 13, second->orig_col is 11, second->Text() is '*', [PTR_TYPE/NONE] : rule IGNORE[ ]
space_col_align : av is ignore
space_col_align :    Len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 13
space_col_align :    => second->orig_line is 13
space_col_align :    => first->Text()     is 'char'
space_col_align :    => second->Text()    is '*'
space_col_align :    => first->orig_col   is 7
space_col_align :    => second->orig_col  is 11
space_col_align :    => first->Len()      is 4
space_col_align :    => coldiff is 4
space_col_align : first->orig_line is 13, orig_col is 11, [PTR_TYPE/NONE], Text() '*' <==>
space_col_align : second->orig_line is 13, orig_col is 13 [QUALIFIER/NONE], Text() 'const', [CallStack]
do_space : orig_line is 13, orig_col is 11, first->Text() '*', type is PTR_TYPE
do_space : first->orig_line is 13, first->orig_col is 11, first->Text() is '*', [PTR_TYPE/NONE] <===>
           second->orig_line is 13, second->orig_col is 13, second->Text() is 'const', [QUALIFIER/NONE] : rule sp_after_ptr_star_qualifier[ ]
space_col_align : av is ignore
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is IGNORE
space_col_align :    => first->orig_line  is 13
space_col_align :    => second->orig_line is 13
space_col_align :    => first->Text()     is '*'
space_col_align :    => second->Text()    is 'const'
space_col_align :    => first->orig_col   is 11
space_col_align :    => second->orig_col  is 13
space_col_align :    => first->Len()      is 1
space_col_align :    => coldiff is 2
space_col_align : first->orig_line is 13, orig_col is 13, [QUALIFIER/NONE], Text() 'const' <==>
space_col_align : second->orig_line is 13, orig_col is 19 [WORD/NONE], Text() 'pTelName', [CallStack]
do_space : orig_line is 13, orig_col is 13, first->Text() 'const', type is QUALIFIER
do_space : first->orig_line is 13, first->orig_col is 13, first->Text() is 'const', [QUALIFIER/NONE] <===>
           second->orig_line is 13, second->orig_col is 19, second->Text() is 'pTelName', [WORD/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'const' and 'pTelName'>space_col_align : av is force
space_col_align :    Len is 5
space_col_align :    => coldiff is 5
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 6
space_col_align : first->orig_line is 13, orig_col is 19, [WORD/NONE], Text() 'pTelName' <==>
space_col_align : second->orig_line is 13, orig_col is 27 [SEMICOLON/NONE], Text() ';', [CallStack]
do_space : orig_line is 13, orig_col is 19, first->Text() 'pTelName', type is WORD
do_space : first->orig_line is 13, first->orig_col is 19, first->Text() is 'pTelName', [WORD/NONE] <===>
           second->orig_line is 13, second->orig_col is 27, second->Text() is ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
space_col_align : av is remove
space_col_align :    Len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 8
space_col_align : first->orig_line is 13, orig_col is 27, [SEMICOLON/NONE], Text() ';' <==>
space_col_align : second->orig_line is 13, orig_col is 28 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 13, orig_col is 27, first->Text() ';', type is SEMICOLON
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
space_col_align : first->orig_line is 14, orig_col is 1, [TYPE/NONE], Text() 'unsigned' <==>
space_col_align : second->orig_line is 14, orig_col is 10 [TYPE/NONE], Text() 'long', [CallStack]
do_space : orig_line is 14, orig_col is 1, first->Text() 'unsigned', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 1, first->Text() is 'unsigned', [TYPE/NONE] <===>
           second->orig_line is 14, second->orig_col is 10, second->Text() is 'long', [TYPE/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'unsigned' and 'long'>space_col_align : av is force
space_col_align :    Len is 8
space_col_align :    => coldiff is 8
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 9
space_col_align : first->orig_line is 14, orig_col is 10, [TYPE/NONE], Text() 'long' <==>
space_col_align : second->orig_line is 14, orig_col is 15 [WORD/NONE], Text() 'nTelIndex', [CallStack]
do_space : orig_line is 14, orig_col is 10, first->Text() 'long', type is TYPE
do_space : first->orig_line is 14, first->orig_col is 10, first->Text() is 'long', [TYPE/NONE] <===>
           second->orig_line is 14, second->orig_col is 15, second->Text() is 'nTelIndex', [WORD/NONE] : rule sp_after_type[ ]
ensure_force_space : <force between 'long' and 'nTelIndex'>space_col_align : av is force
space_col_align :    Len is 4
space_col_align :    => coldiff is 4
space_col_align :    => av is FORCE
space_col_align :    => coldiff is 5
space_col_align : first->orig_line is 14, orig_col is 15, [WORD/NONE], Text() 'nTelIndex' <==>
space_col_align : second->orig_line is 14, orig_col is 24 [SEMICOLON/NONE], Text() ';', [CallStack]
do_space : orig_line is 14, orig_col is 15, first->Text() 'nTelIndex', type is WORD
do_space : first->orig_line is 14, first->orig_col is 15, first->Text() is 'nTelIndex', [WORD/NONE] <===>
           second->orig_line is 14, second->orig_col is 24, second->Text() is ';', [SEMICOLON/NONE] : rule sp_before_semi[ ]
space_col_align : av is remove
space_col_align :    Len is 9
space_col_align :    => coldiff is 9
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 9
space_col_align : first->orig_line is 14, orig_col is 24, [SEMICOLON/NONE], Text() ';' <==>
space_col_align : second->orig_line is 14, orig_col is 25 [NEWLINE/NONE], Text() '', [CallStack]
do_space : orig_line is 14, orig_col is 24, first->Text() ';', type is SEMICOLON
space_col_align : av is remove
space_col_align :    Len is 1
space_col_align :    => coldiff is 1
space_col_align :    => av is REMOVE
space_col_align :    => coldiff is 1
